<application>
  <component name="AppStorage">
    <option name="newTranslationDialogCollapseDictViewer" value="false" />
    <option name="newTranslationDialogWidth" value="706" />
    <option name="newTranslationDialogX" value="1105" />
    <option name="newTranslationDialogY" value="844" />
    <histories>
      <item value="Error Dialog Manager" />
      <item value="MAXIMUM POOL SIZE" />
      <item value="Async" />
      <item value="asynch" />
      <item value="异步" />
      <item value="asyn" />
      <item value="Commen" />
      <item value="invalid" />
      <item value="unionpay" />
      <item value="api" />
      <item value="Dex Archive Builder Exception" />
      <item value="Compilation Failed Exception" />
      <item value="match" />
      <item value="Inherited" />
      <item value="classpath 'com.bitAuto.plugin:full_point:1.0.3-alpha'" />
      <item value="SKIP FRAMES" />
      <item value="check XML On Click" />
      <item value="Returns the parallelism of this executor i.e. how many tasks can run in parallel." />
      <item value="get Parallelism" />
      <item value="Returns the common pool instance. This pool is statically constructed; its run state is unaffected by attempts to {@link shutdown} or {@link shutdownNow}. However this pool and any ongoing processing are automatically terminated upon program {@link Systemexit}. Any program that relies on asynchronous task processing to complete before program termination should invoke {@code commonPool().}{@link awaitQuiescence awaitQuiescence}, before exit." />
      <item value="get Security Manager" />
      <item value="default Fork Join Worker Thread Factory" />
      <item value="Rejected Execution Exception" />
      <item value="use Global Shared Thread Pool" />
      <item value="Fail" />
      <item value="Waits for all tasks to be executed. If a tasks throws an exception, it will be thrown from this method inside a RuntimeException, preventing access to the result of the other threads. &lt;p&gt;If you want to get the results of all tasks (result andor exception), use {@link waitForAllTasks()} &lt;p&gt;To get the actual cause of the failure, examine the exception thrown. There are some nuances to it though. If the exception was thrown on the same thread on which we wait for completion, the {@link ThrowablegetCause()} will be {@code null}. If the exception was thrown on a different thread, the fork join pool mechanism will try to set the cause. Because there is no access to this information, you probably want to check for the cause first, and only if it is null, to check the exception thrown by this method." />
      <item value="join" />
      <item value="cancel Remaining" />
      <item value="wait For Tasks With Quick Fail" />
      <item value="executor" />
      <item value="owner" />
      <item value="wait For All Tasks" />
      <item value="using a plain JDK" />
      <item value="that executes runnables directly" />
      <item value="Direct Worker Executor" />
      <item value="begin Transform" />
      <item value="after Transform" />
      <item value="weave Single Class To File" />
      <item value="Configuration for action submission." />
      <item value="A utility wrapper around a {link ForkJoinPool} that allows to wait on all the submitted tasks. &lt;p&gt;Tasks are submitted as {@link Callable} with {@link execute(java.util.concurrent.Callable)}. &lt;p&gt;After executing all tasks, it is possible to wait on them with {@link waitForTasksWithQuickFail(boolean)}, or {@link waitForAllTasks()}. &lt;p&gt;Tasks can also be individually monitored using the {@link Future&lt;&gt;} object @deprecated Use {@link com.android.ide.common.workers.WorkerExecutorFacade} instead." />
      <item value="incremental Task Inputs" />
      <item value="Closing a &lt;tt&gt;ByteArrayOutputStream&lt;tt&gt; has no effect. The methods in this class can be called after the stream has been closed without generating an &lt;tt&gt;IOException&lt;tt&gt;." />
      <item value="if an IO error occurs" />
      <item value="get Call Site Array" />
      <item value="desc" />
      <item value="visible" />
      <item value="class White List Regex" />
      <item value="Indicates that annotations with a type are to be documented by javadoc and similar tools by default. This type should be used to annotate the declarations of types whose annotations affect the use of annotated elements by their clients. If a type declaration is annotated with Documented, its annotations become part of the public API of the annotated elements." />
      <item value="Indicates that an annotation type is automatically inherited. If an Inherited meta-annotation is present on an annotation type declaration, and the user queries the annotation type on a class declaration, and the class declaration has no annotation for this type, then the class's superclass will automatically be queried for the annotation type. This process will be repeated until an annotation for this type is found, or the top of the class hierarchy (Object) is reached. If no superclass has an annotation for this type, then the query will indicate that the class in question has no such annotation. &lt;p&gt;Note that this meta-annotation type has no effect if the annotated type is used to annotate anything other than a class. Note also that this meta-annotation only causes annotations to be inherited from superclasses; annotations on implemented interfaces have no effect." />
      <item value="mapping" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="558" />
        <entry key="ENGLISH" value="550" />
        <entry key="POLISH" value="2" />
        <entry key="DANISH" value="1" />
        <entry key="GERMAN" value="1" />
        <entry key="FILIPINO" value="2" />
        <entry key="CZECH" value="1" />
        <entry key="LUXEMBOURGISH" value="1" />
        <entry key="ROMANIAN" value="1" />
        <entry key="NORWEGIAN" value="2" />
        <entry key="SLOVENIAN" value="1" />
        <entry key="SWAHILI" value="1" />
        <entry key="TURKISH" value="1" />
        <entry key="SPANISH" value="1" />
        <entry key="ITALIAN" value="1" />
        <entry key="HINDI" value="1" />
        <entry key="INDONESIAN" value="3" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1615793862849" />
  </component>
  <component name="Settings">
    <option name="googleTranslateSettings">
      <google-translate>
        <option name="useTranslateGoogleCom" value="true" />
      </google-translate>
    </option>
    <option name="translator" value="YOUDAO" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="7a4dd746f1c5fe26" />
      </youdao-translate>
    </option>
  </component>
</application>