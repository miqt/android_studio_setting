<application>
  <component name="AppStorage">
    <option name="newTranslationDialogCollapseDictViewer" value="false" />
    <option name="newTranslationDialogWidth" value="706" />
    <option name="newTranslationDialogX" value="1105" />
    <option name="newTranslationDialogY" value="844" />
    <histories>
      <item value="Computable Live Data" />
      <item value="m Data Lock" />
      <item value="observe Forever" />
      <item value="Live Data" />
      <item value="Mediator Live Data" />
      <item value="Lifecycle" />
      <item value="constant that can be used to match all events." />
      <item value="ON ANY" />
      <item value="Lifecycle Owner" />
      <item value="NETWORK TYPE NR" />
      <item value="config.is Auto Track Fragment Page View()" />
      <item value="SP SEND TIME" />
      <item value="flush Interval" />
      <item value="req Policy And Apply" />
      <item value="set Volume Control Stream" />
      <item value="get Owner Activity" />
      <item value="is From User" />
      <item value="is Pressed" />
      <item value="Eval" />
      <item value="package com.bitAuto.utils; import android.annotation.TargetApi; import android.app.ActionBar; import android.app.Activity; import android.app.Dialog; import android.app.Fragment; import android.content.Context; import android.content.ContextWrapper; import android.content.pm.ActivityInfo; import android.content.pm.PackageManager; import android.os.Build; import android.text.TextUtils; import android.util.DisplayMetrics; import android.view.View; import android.view.ViewParent; import android.view.Window; import android.view.WindowManager; import com.bitAuto.BitAutoAutoPageTracker; import com.bitAuto.R; import java.lang.reflect.Method; import java.util.HashMap; import java.util.List; import java.util.Map; Description:全埋点使用到的相关工具代码 Date: 2020-10-27 14:05 Version: 1.0 public class AllegroUtils { -------- 控件元素相关 ----------- public static String getViewIdResourceName(View view) { String idString = &quot;&quot;; try { idString = (String) view.getTag(R.id.bitAuto_tag_view_id); if (TextUtils.isEmpty(idString)) { if (view.getId() != View.NO_ID) { idString = getIdResourceName(view.getId()); } } } catch (Throwable ignore) { ExceptionUtil.exceptionThrow(ignore); } return idString; } public static void setViewIdResourceName(View view, String id) { try { if (view != null &amp;&amp; !TextUtils.isEmpty(id)) { view.setTag(R.id.bitAuto_tag_view_id, id); } String ids = (String) view.getTag((R.id.bitAuto_tag_view_id)); } catch (Throwable ignore) { ExceptionUtil.exceptionThrow(ignore); } } public static String getIdResourceName(int id) { String idString = &quot;&quot;; try { if (id != View.NO_ID) { idString = Utils.getContext().getResources().getResourceEntryName(id); } } catch (Throwable ignore) { ExceptionUtil.exceptionThrow(ignore); } return idString; } 通过反射判断类的类型 @param view 判断类型的 view @return viewType private static String getViewTypeByReflect(View view) { Class&lt;?&gt; compatClass; compatClass = BitAutoReflectUtils.getClassByName(&quot;android.widget.Switch&quot;); if (compatClass != null &amp;&amp; compatClass.isInstance(view)) { return &quot;Switch&quot;; } compatClass = BitAutoReflectUtils.getClassByName(&quot;android.support.v7.widget.SwitchCompat&quot;); if (compatClass != null &amp;&amp; compatClass.isInstance(view)) { return &quot;SwitchCompat&quot;; } compatClass = BitAutoReflectUtils.getClassByName(&quot;android.support.design.widget.NavigationView&quot;); if (compatClass != null &amp;&amp; compatClass.isInstance(view)) { return &quot;SwitchCompat&quot;; } return view.getClass().getName(); } 通过反射判断类的类型 @param view 判断类型的 viewGroup @return viewType private static String getViewGroupTypeByReflect(View view) { Class&lt;?&gt; compatClass; compatClass = ReflectUtils.getClassByName(&quot;android.support.v7.widget.CardView&quot;); if (compatClass != null &amp;&amp; compatClass.isInstance(view)) { return &quot;CardView&quot;; } compatClass = ReflectUtils.getClassByName(&quot;androidx.cardview.widget.CardView&quot;); if (compatClass != null &amp;&amp; compatClass.isInstance(view)) { return &quot;CardView&quot;; } compatClass = ReflectUtils.getClassByName(&quot;android.support.design.widget.NavigationView&quot;); if (compatClass != null &amp;&amp; compatClass.isInstance(view)) { return &quot;NavigationView&quot;; } compatClass = ReflectUtils.getClassByName(&quot;com.google.android.material.navigation.NavigationView&quot;); if (compatClass != null &amp;&amp; compatClass.isInstance(view)) { return &quot;NavigationView&quot;; } return view.getClass().getName(); } --------- 页面相关 ------------------- public static boolean isPage(Object checkObj) { return checkObj != null &amp;&amp; (checkObj instanceof Activity || checkObj instanceof Dialog || isFragment(checkObj)); } 判断当前示例是不是Fragment public static boolean isFragment(Object object) { try { Class&lt;?&gt; supportFragmentClass = null; Class&lt;?&gt; androidXFragmentClass = null; Class&lt;?&gt; fragment = null; fragment = ReflectUtils.getClassByName(&quot;android.app.Fragment&quot;); supportFragmentClass = ReflectUtils.getClassByName(&quot;android.support.v4.app.Fragment&quot;); androidXFragmentClass = ReflectUtils.getClassByName(&quot;androidx.fragment.app.Fragment&quot;); if (supportFragmentClass == null &amp;&amp; androidXFragmentClass == null &amp;&amp; fragment == null) { return false; } if ((supportFragmentClass != null &amp;&amp; supportFragmentClass.isInstance(object)) || (androidXFragmentClass != null &amp;&amp; androidXFragmentClass.isInstance(object)) || (fragment != null &amp;&amp; fragment.isInstance(object))) { return true; } } catch (Throwable ignore) { ExceptionUtil.exceptionThrow(ignore); ignored } return false; } 获取示页面相关信息 @param pageObj @param flag:false表示pv事件，true表示点击事件 @return public static Map&lt;String, Object&gt; getPageInfo(Object pageObj, boolean flag) { Map&lt;String, Object&gt; pageInfo = new HashMap&lt;&gt;(3); try { if (pageObj == null) { return pageInfo; } if (pageObj instanceof BitAutoAutoPageTracker) { BitAutoAutoPageTracker autoPageTracker = (BitAutoAutoPageTracker) pageObj; Map&lt;String, Object&gt; map = autoPageTracker.registerPageProperties(); String url = autoPageTracker.registerPageUrl(); if (map != null &amp;&amp; !TextUtils.isEmpty(url)) { map.put(Constants.PAGE_URL, url); } if (map != null &amp;&amp; map.size() &gt; 0) { pageInfo.putAll(map); } } if (pageObj instanceof Activity) { if (!pageInfo.containsKey(Constants.PAGE_TITLE)) { String title = getActivityTitle((Activity) pageObj); if (TextUtils.isEmpty(title)) { pageInfo.put(Constants.PAGE_TITLE, title); } } if (!pageInfo.containsKey(Constants.PAGE_URL)) { pageInfo.put(Constants.PAGE_URL, pageObj.getClass().getCanonicalName()); } } else if (pageObj instanceof Dialog) { Activity parentAc = getActivityFromDialog((Dialog) pageObj); if (!pageInfo.containsKey(Constants.PAGE_TITLE)) { String title = pageObj.getClass().getName(); if (parentAc != null) { String inText = getActivityTitle(parentAc); if (!TextUtils.isEmpty(inText)) { title += &quot; in &quot; + inText; } } pageInfo.put(Constants.PAGE_TITLE, title); } if (!pageInfo.containsKey(Constants.PAGE_URL)) { pageInfo.put(Constants.PAGE_URL, pageObj.getClass().getName()); } if (flag) { if (parentAc != null) { pageInfo.put(Constants.PARENT_URL, getPageUrl(parentAc)); } } } else if (isFragment(pageObj)) { Activity parentAc = getActivityFromFragment(pageObj); if (!pageInfo.containsKey(Constants.PAGE_TITLE)) { String title = pageObj.getClass().getName(); if (parentAc != null) { String inText = getActivityTitle(parentAc); if (!TextUtils.isEmpty(inText)) { title += &quot; in &quot; + inText; } } pageInfo.put(Constants.PAGE_TITLE, title); } if (!pageInfo.containsKey(Constants.PAGE_URL)) { pageInfo.put(Constants.PAGE_URL, pageObj.getClass().getName()); } if (flag) { if (parentAc != null) { pageInfo.put(Constants.PARENT_URL, getPageUrl(parentAc)); } } } if(flag){ 页面宽高 int[] pageHeightAndWidth = getPageHeightAndWidth(pageObj); pageInfo.put(Constants.PAGE_HEIGHT, pageHeightAndWidth[0]); pageInfo.put(Constants.PAGE_WIDTH, pageHeightAndWidth[1]); } } catch (Throwable ignore) { ExceptionUtil.exceptionThrow(ignore); } return pageInfo; } public static Activity getCurAc() { return Utils.getCurActivity(); } 通过View获取Activity public static Object getPageObjFromView(View v) { try { if (v != null) { 尝试获取Dialog Dialog dialog = getDialogFromView(v); if (dialog != null) { return dialog; } 尝试获取Fragment Object fragment = getFragmetByView(v); if (fragment != null) { return fragment; } try { String pageName = getFragmentPageName(v); if (!TextUtils.isEmpty(pageName)) { return Class.forName(pageName).newInstance(); } } catch (Throwable ignore) { ExceptionUtil.exceptionThrow(ignore); } 尝试获取activity Activity activity = getActivityFromView(v); if (activity != null) { return activity; } } } catch (Throwable ignore) { ExceptionUtil.exceptionThrow(ignore); } 最后的尝试 return Utils.getCurActivity(); } private static Object getFragmetByView(View v) { Context ctx = v.getContext(); Object fm = ReflectUtils.invokeMethod(ctx, &quot;getSupportFragmentManager&quot;); if (fm == null) { fm = ReflectUtils.invokeMethod(ctx, &quot;getFragmentManager&quot;); if (fm == null) { return null; } } Object obj = ReflectUtils.invokeMethod(fm, &quot;getFragments&quot;); if (!(obj instanceof List)) { return null; } List fragments = (List) obj; for (Object fragment : fragments) { Object isAdded = ReflectUtils.invokeMethod(fragment, &quot;isAdded&quot;); if (isAdded instanceof Boolean &amp;&amp; (boolean) isAdded) { Object view = ReflectUtils.invokeMethod(fragment, &quot;getView&quot;); if (view instanceof View &amp;&amp; isBelongToView((View) view, v)) { return fragment; } } } return null; } private static boolean isBelongToView(View rootView, View view) { if (rootView == view) { return true; } ViewParent parent = view.getParent(); if (parent instanceof View) { return isBelongToView(rootView, (View) parent); } else { return false; } } 获取当前Fragment的父Fragment public static Object getParentFragment(Object fragmentObj) { try { Method getParentFragmentMethod = fragmentObj.getClass().getMethod(&quot;getParentFragment&quot;); return getParentFragmentMethod.invoke(fragmentObj); } catch (Throwable ignore) { ignored } return null; } 获取 Activity 的 title @param activity Activity @return Activity 的 title private static String getActivityTitle(Activity activity) { if (activity != null) { try { String activityTitle = null; if (Build.VERSION.SDK_INT &gt;= 11) { String toolbarTitle = getToolbarTitle(activity); if (!TextUtils.isEmpty(toolbarTitle)) { activityTitle = toolbarTitle; } } if (TextUtils.isEmpty(activityTitle)) { activityTitle = activity.getTitle().toString(); } if (TextUtils.isEmpty(activityTitle)) { PackageManager packageManager = activity.getPackageManager(); if (packageManager != null) { ActivityInfo activityInfo = packageManager.getActivityInfo(activity.getComponentName(), 0); if (!TextUtils.isEmpty(activityInfo.loadLabel(packageManager))) { activityTitle = activityInfo.loadLabel(packageManager).toString(); } } } return activityTitle; } catch (Throwable ignore) { ExceptionUtil.exceptionThrow(ignore); return null; } } return null; } @TargetApi(11) private static String getToolbarTitle(Activity activity) { try { if (&quot;com.tencent.connect.common.AssistActivity&quot;.equals(activity.getClass().getCanonicalName())) { if (!TextUtils.isEmpty(activity.getTitle())) { return activity.getTitle().toString(); } return null; } ActionBar actionBar = activity.getActionBar(); if (actionBar != null) { try { if (!TextUtils.isEmpty(actionBar.getTitle())) { return actionBar.getTitle().toString(); } } catch (Throwable ignore) { ExceptionUtil.exceptionPrint(ignore); } } else { try { Class&lt;?&gt; appCompatActivityClass = compatActivity(); if (appCompatActivityClass != null &amp;&amp; appCompatActivityClass.isInstance(activity)) { Method method = activity.getClass().getMethod(&quot;getSupportActionBar&quot;); Object supportActionBar = method.invoke(activity); if (supportActionBar != null) { method = supportActionBar.getClass().getMethod(&quot;getTitle&quot;); CharSequence charSequence = (CharSequence) method.invoke(supportActionBar); if (charSequence != null) { return charSequence.toString(); } } } } catch (Throwable ignore) { ExceptionUtil.exceptionPrint(ignore); ignored } } } catch (Throwable ignore) { ExceptionUtil.exceptionThrow(ignore); } return null; } private static Class&lt;?&gt; compatActivity() { Class&lt;?&gt; appCompatActivityClass = null; appCompatActivityClass = ReflectUtils.getClassByName(&quot;android.support.v7.app.AppCompatActivity&quot;); if (appCompatActivityClass == null) { appCompatActivityClass = ReflectUtils.getClassByName(&quot;androidx.appcompat.app.AppCompatActivity&quot;); } return appCompatActivityClass; } 获取示例的url 和 title @param pageObj @return String[0]=Height String[1]=Width private static int[] getPageHeightAndWidth(Object pageObj) { int[] pageInfo = new int[2]; if (pageObj instanceof Activity) { Activity ac = (Activity) pageObj; View decorView = ac.getWindow().getDecorView(); pageInfo[0] = decorView.getHeight(); pageInfo[1] = decorView.getWidth(); } else if (isFragment(pageObj)) { try { Class pageClass = pageObj.getClass(); Method getViewMethod = pageClass.getMethod(&quot;getView&quot;); if (!getViewMethod.isAccessible()) { getViewMethod.setAccessible(true); } View view = (View) getViewMethod.invoke(pageObj); if (view != null) { pageInfo[0] = view.getHeight(); pageInfo[1] = view.getWidth(); } } catch (Throwable ignore) { ExceptionUtil.exceptionThrow(ignore); } } else if (pageObj instanceof Dialog) { Dialog dlg = (Dialog) pageObj; View decorView = dlg.getWindow().getDecorView(); pageInfo[0] = decorView.getHeight(); pageInfo[1] = decorView.getWidth(); } else { WindowManager wm = (WindowManager) (Utils.getContext().getSystemService(Context.WINDOW_SERVICE)); DisplayMetrics metrics = new DisplayMetrics(); if (wm != null) { wm.getDefaultDisplay().getMetrics(metrics); pageInfo[0] = metrics.heightPixels; pageInfo[1] = metrics.widthPixels; } } return pageInfo; } 获取页面Url @param pageObj 页面对象 @return Url public static String getPageUrl(Object pageObj) { String url = &quot;&quot;; if (pageObj instanceof BitAutoAutoPageTracker) { BitAutoAutoPageTracker autoPageTracker = (BitAutoAutoPageTracker) pageObj; url = autoPageTracker.registerPageUrl(); if (TextUtils.isEmpty(url)) { Map&lt;String, Object&gt; map = autoPageTracker.registerPageProperties(); if (map != null) { url = (String) map.get(Constants.PAGE_URL); } } if (TextUtils.isEmpty(url)) { return url; } } if (pageObj instanceof Activity) { url = pageObj.getClass().getCanonicalName(); } else if (pageObj != null) { url = pageObj.getClass().getName(); } return url; } 根据 Fragment 获取对应的 Activity @param fragment，Fragment @return Activity or null public static Activity getActivityFromFragment(Object fragment) { Activity currentActivity = null; try { ((Fragment)fragment).getActivity() if (fragment != null &amp;&amp; (fragment instanceof Fragment)) { currentActivity = ((Fragment) fragment).getActivity(); } if (currentActivity == null) { Method getActivityMethod = fragment.getClass().getMethod(&quot;getActivity&quot;); currentActivity = (Activity) getActivityMethod.invoke(fragment); } if (currentActivity == null) { currentActivity = getCurAc(); } } catch (Throwable ignore) { ExceptionUtil.exceptionThrow(ignore); ignored } return currentActivity; } public static Activity getActivityFromDialog(Dialog dialog) { Activity ac = AllegroUtils.getActivityFromContext(dialog.getContext()); if (ac == null) { ac = dialog.getOwnerActivity(); } if (ac == null) { ac = getCurAc(); } return ac; } 通过View获取Activity public static Activity getActivityFromView(View view) { if (view == null) { return getCurAc(); } return getActivityFromContext(view.getContext()); } 通过上下问获取activity private static Activity getActivityFromContext(Context context) { if (context != null) { if (context instanceof Activity) { return (Activity) context; } else if (context instanceof ContextWrapper) { while (!(context instanceof Activity) &amp;&amp; context instanceof ContextWrapper) { context = ((ContextWrapper) context).getBaseContext(); } if (context instanceof Activity) { return (Activity) context; } } } return getCurAc(); } 通过View获取Dialog private static Dialog getDialogFromView(View v) { Object result = ReflectUtils.invokeMethod(v, &quot;getWindow&quot;); if (result instanceof Window) { Window window = (Window) result; Window.Callback callback = window.getCallback(); if (callback instanceof Dialog) { return (Dialog) callback; } } return null; } private static String getFragmentPageName(View v) { Object tag = v.getTag(R.id.bitAuto_tag_fragment_name); if (tag instanceof String) { return tag.toString(); } ViewParent parent = v.getParent(); while (parent instanceof View) { View curView = (View) parent; Object fragmentName = curView.getTag(R.id.bitAuto_tag_fragment_name); if (fragmentName instanceof String) { String pageName = fragmentName.toString(); v.setTag(R.id.bitAuto_tag_fragment_name, pageName); return pageName; } parent = curView.getParent(); } return &quot;&quot;; } }" />
      <item value="allgro" />
      <item value="penalty Log" />
      <item value="detect All" />
      <item value="set Negative Button" />
      <item value="set Positive Button" />
      <item value="REFERRER" />
      <item value="退出" />
      <item value="track Fragment Set User Visible Hint" />
      <item value="Stay" />
      <item value="Boolean method 'checkTrackClickEnable' is always inverted" />
      <item value="Automatic Acquisition" />
      <item value="extend Key" />
      <item value="try Get Location Ed" />
      <item value="batch" />
      <item value="Nice" />
      <item value="Nice Tool" />
      <item value="NiceTool" />
      <item value="When a database query is executed, the results returned are paginated in pages of size (in KB) indicated by this value" />
      <item value="required" />
      <item value="get Local Visible Rect" />
      <item value="monitor View Tree Change" />
      <item value="Internal Insets Info" />
      <item value="Subscription" />
      <item value="check And Send View Tree Change" />
      <item value="m First Toggle Time" />
      <item value="add On Global Layout Listener" />
      <item value="Timer Toggler" />
      <item value="on Global Layout" />
      <item value="Toggler" />
      <item value="Toggler With Views" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="455" />
        <entry key="ENGLISH" value="454" />
        <entry key="GERMAN" value="1" />
        <entry key="FILIPINO" value="1" />
        <entry key="CZECH" value="1" />
        <entry key="LUXEMBOURGISH" value="1" />
        <entry key="ROMANIAN" value="1" />
        <entry key="NORWEGIAN" value="2" />
        <entry key="SLOVENIAN" value="1" />
        <entry key="SWAHILI" value="1" />
        <entry key="SPANISH" value="1" />
        <entry key="ITALIAN" value="1" />
        <entry key="INDONESIAN" value="2" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1614589222138" />
  </component>
  <component name="Settings">
    <option name="googleTranslateSettings">
      <google-translate>
        <option name="useTranslateGoogleCom" value="true" />
      </google-translate>
    </option>
    <option name="translator" value="YOUDAO" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="7a4dd746f1c5fe26" />
      </youdao-translate>
    </option>
  </component>
</application>