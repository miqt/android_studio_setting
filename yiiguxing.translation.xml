<application>
  <component name="AppStorage">
    <option name="newTranslationDialogWidth" value="712" />
    <option name="newTranslationDialogX" value="1105" />
    <option name="newTranslationDialogY" value="907" />
    <histories>
      <item value="single" />
      <item value="get Flavor Name" />
      <item value="get Variant" />
      <item value="set Proguard Map" />
      <item value="set Cl Init Only" />
      <item value="does not yet support incremental build" />
      <item value="before Transform" />
      <item value="after Transform" />
      <item value="is Incremental" />
      <item value="Transform Configuration" />
      <item value="The option setting 'android.enableD8.desugaring=false' is experimental and unsupported." />
      <item value="relative Path" />
      <item value="dependencies" />
      <item value="get Extensions" />
      <item value="get Artifacts" />
      <item value="project.get Buildscript()" />
      <item value="provider" />
      <item value="evaluation" />
      <item value="evaluation Depends On" />
      <item value="get Display Name" />
      <item value="get Root Dir" />
      <item value="getRootProject getRootDir getBuildDir setBuildDir setBuildDir getBuildFile getParent getName getDisplayName getDescription setDescription getGroup setGroup getVersion setVersion getStatus setStatus getChildProjects setProperty getProject getAllprojects getSubprojects task task task task task getPath getDefaultTasks setDefaultTasks defaultTasks evaluationDependsOn evaluationDependsOnChildren findProject project project project getAllTasks getTasksByName getProjectDir file file uri relativePath files files files fileTree fileTree fileTree fileTree zipTree tarTree provider getProviders getObjects getLayout mkdir delete delete javaexec javaexec exec exec absoluteProjectPath relativeProjectPath getAnt createAntBuilder ant ant getConfigurations configurations getArtifacts artifacts artifacts getConvention depthCompare getDepth getTasks subprojects subprojects allprojects allprojects beforeEvaluate afterEvaluate beforeEvaluate afterEvaluate hasProperty getProperties property findProperty getLogger getGradle getLogging configure configure configure getRepositories repositories getDependencies dependencies getBuildscript buildscript copy copy copySpec copySpec copySpec sync getState container container container getExtensions getResources getComponents getNormalization normalization dependencyLocking getDependencyLocking DEFAULT_BUILD_FILE PATH_SEPARATOR DEFAULT_BUILD_DIR_NAME GRADLE_PROPERTIES SYSTEM_PROP_PREFIX DEFAULT_VERSION DEFAULT_STATUS" />
      <item value="Source code recreated from a .class file by IntelliJ IDEA (powered by Fernflower decompiler) package org.gradle.api; import groovy.lang.Closure; import groovy.lang.MissingPropertyException; import java.io.File; import java.net.URI; import java.util.List; import java.util.Map; import java.util.Set; import java.util.concurrent.Callable; import javax.annotation.Nullable; import org.gradle.api.artifacts.ConfigurationContainer; import org.gradle.api.artifacts.dsl.ArtifactHandler; import org.gradle.api.artifacts.dsl.DependencyHandler; import org.gradle.api.artifacts.dsl.DependencyLockingHandler; import org.gradle.api.artifacts.dsl.RepositoryHandler; import org.gradle.api.component.SoftwareComponentContainer; import org.gradle.api.file.ConfigurableFileCollection; import org.gradle.api.file.ConfigurableFileTree; import org.gradle.api.file.CopySpec; import org.gradle.api.file.DeleteSpec; import org.gradle.api.file.FileTree; import org.gradle.api.file.ProjectLayout; import org.gradle.api.initialization.dsl.ScriptHandler; import org.gradle.api.invocation.Gradle; import org.gradle.api.logging.Logger; import org.gradle.api.logging.LoggingManager; import org.gradle.api.model.ObjectFactory; import org.gradle.api.plugins.Convention; import org.gradle.api.plugins.ExtensionAware; import org.gradle.api.plugins.ExtensionContainer; import org.gradle.api.plugins.PluginAware; import org.gradle.api.provider.Provider; import org.gradle.api.provider.ProviderFactory; import org.gradle.api.resources.ResourceHandler; import org.gradle.api.tasks.TaskContainer; import org.gradle.api.tasks.WorkResult; import org.gradle.normalization.InputNormalizationHandler; import org.gradle.process.ExecResult; import org.gradle.process.ExecSpec; import org.gradle.process.JavaExecSpec; public interface Project extends Comparable&lt;Project&gt;, ExtensionAware, PluginAware { String DEFAULT_BUILD_FILE = &quot;build.gradle&quot;; String PATH_SEPARATOR = &quot;:&quot;; String DEFAULT_BUILD_DIR_NAME = &quot;build&quot;; String GRADLE_PROPERTIES = &quot;gradle.properties&quot;; String SYSTEM_PROP_PREFIX = &quot;systemProp&quot;; String DEFAULT_VERSION = &quot;unspecified&quot;; String DEFAULT_STATUS = &quot;release&quot;; Project getRootProject(); File getRootDir(); File getBuildDir(); void setBuildDir(File var1); void setBuildDir(Object var1); File getBuildFile(); @Nullable Project getParent(); String getName(); String getDisplayName(); @Nullable String getDescription(); void setDescription(@Nullable String var1); Object getGroup(); void setGroup(Object var1); Object getVersion(); void setVersion(Object var1); Object getStatus(); void setStatus(Object var1); Map&lt;String, Project&gt; getChildProjects(); void setProperty(String var1, @Nullable Object var2) throws MissingPropertyException; Project getProject(); Set&lt;Project&gt; getAllprojects(); Set&lt;Project&gt; getSubprojects(); Task task(String var1) throws InvalidUserDataException; Task task(Map&lt;String, ?&gt; var1, String var2) throws InvalidUserDataException; Task task(Map&lt;String, ?&gt; var1, String var2, Closure var3); Task task(String var1, Closure var2); Task task(String var1, Action&lt;? super Task&gt; var2); String getPath(); List&lt;String&gt; getDefaultTasks(); void setDefaultTasks(List&lt;String&gt; var1); void defaultTasks(String... var1); Project evaluationDependsOn(String var1) throws UnknownProjectException; void evaluationDependsOnChildren(); @Nullable Project findProject(String var1); Project project(String var1) throws UnknownProjectException; Project project(String var1, Closure var2); Project project(String var1, Action&lt;? super Project&gt; var2); Map&lt;Project, Set&lt;Task&gt;&gt; getAllTasks(boolean var1); Set&lt;Task&gt; getTasksByName(String var1, boolean var2); File getProjectDir(); File file(Object var1); File file(Object var1, PathValidation var2) throws InvalidUserDataException; URI uri(Object var1); String relativePath(Object var1); ConfigurableFileCollection files(Object... var1); ConfigurableFileCollection files(Object var1, Closure var2); ConfigurableFileCollection files(Object var1, Action&lt;? super ConfigurableFileCollection&gt; var2); ConfigurableFileTree fileTree(Object var1); ConfigurableFileTree fileTree(Object var1, Closure var2); ConfigurableFileTree fileTree(Object var1, Action&lt;? super ConfigurableFileTree&gt; var2); ConfigurableFileTree fileTree(Map&lt;String, ?&gt; var1); FileTree zipTree(Object var1); FileTree tarTree(Object var1); &lt;T&gt; Provider&lt;T&gt; provider(Callable&lt;T&gt; var1); ProviderFactory getProviders(); ObjectFactory getObjects(); ProjectLayout getLayout(); File mkdir(Object var1); boolean delete(Object... var1); WorkResult delete(Action&lt;? super DeleteSpec&gt; var1); ExecResult javaexec(Closure var1); ExecResult javaexec(Action&lt;? super JavaExecSpec&gt; var1); ExecResult exec(Closure var1); ExecResult exec(Action&lt;? super ExecSpec&gt; var1); String absoluteProjectPath(String var1); String relativeProjectPath(String var1); AntBuilder getAnt(); AntBuilder createAntBuilder(); AntBuilder ant(Closure var1); AntBuilder ant(Action&lt;? super AntBuilder&gt; var1); ConfigurationContainer getConfigurations(); void configurations(Closure var1); ArtifactHandler getArtifacts(); void artifacts(Closure var1); void artifacts(Action&lt;? super ArtifactHandler&gt; var1); Convention getConvention(); int depthCompare(Project var1); int getDepth(); TaskContainer getTasks(); void subprojects(Action&lt;? super Project&gt; var1); void subprojects(Closure var1); void allprojects(Action&lt;? super Project&gt; var1); void allprojects(Closure var1); void beforeEvaluate(Action&lt;? super Project&gt; var1); void afterEvaluate(Action&lt;? super Project&gt; var1); void beforeEvaluate(Closure var1); void afterEvaluate(Closure var1); boolean hasProperty(String var1); Map&lt;String, ?&gt; getProperties(); @Nullable Object property(String var1) throws MissingPropertyException; @Nullable Object findProperty(String var1); Logger getLogger(); Gradle getGradle(); LoggingManager getLogging(); Object configure(Object var1, Closure var2); Iterable&lt;?&gt; configure(Iterable&lt;?&gt; var1, Closure var2); &lt;T&gt; Iterable&lt;T&gt; configure(Iterable&lt;T&gt; var1, Action&lt;? super T&gt; var2); RepositoryHandler getRepositories(); void repositories(Closure var1); DependencyHandler getDependencies(); void dependencies(Closure var1); ScriptHandler getBuildscript(); void buildscript(Closure var1); WorkResult copy(Closure var1); WorkResult copy(Action&lt;? super CopySpec&gt; var1); CopySpec copySpec(Closure var1); CopySpec copySpec(Action&lt;? super CopySpec&gt; var1); CopySpec copySpec(); WorkResult sync(Action&lt;? super CopySpec&gt; var1); ProjectState getState(); &lt;T&gt; NamedDomainObjectContainer&lt;T&gt; container(Class&lt;T&gt; var1); &lt;T&gt; NamedDomainObjectContainer&lt;T&gt; container(Class&lt;T&gt; var1, NamedDomainObjectFactory&lt;T&gt; var2); &lt;T&gt; NamedDomainObjectContainer&lt;T&gt; container(Class&lt;T&gt; var1, Closure var2); ExtensionContainer getExtensions(); ResourceHandler getResources(); SoftwareComponentContainer getComponents(); InputNormalizationHandler getNormalization(); void normalization(Action&lt;? super InputNormalizationHandler&gt; var1); void dependencyLocking(Action&lt;? super DependencyLockingHandler&gt; var1); DependencyLockingHandler getDependencyLocking(); }" />
      <item value="get Depth" />
      <item value="quiet" />
      <item value="Cannot constrain type: INT for value: v40(checkpoint) by constraint: OBJECT" />
      <item value="Project directory 'E:\android_proj\ASMCode\methodhook' is not part of the build defined by settings file 'E:\android_proj\ASMCode\settings.gradle'. If this is an unrelated build, it must have its own settings file." />
      <item value="repositories" />
      <item value="selected region does not have full tracking ,data may be inaccurate" />
      <item value="selected region does not have full tracking ,data may be inaccura" />
      <item value="selected region does not have full tracking ,data may be inaccu" />
      <item value="selected region does not have full tracking ,data may be inacc" />
      <item value="selected region does not have full tracking ,data may be in" />
      <item value="selected region does not have full tracking ,data may be " />
      <item value="selected region does not have full tracking ,data may b" />
      <item value="selected region does not have full tracking ,data ma" />
      <item value="selected region does not have full tracking ,data" />
      <item value="selected region does not have full tracking " />
      <item value="selected region does not have full trac" />
      <item value="selected region does not have full tr" />
      <item value="selected region does not have full " />
      <item value="selected region does not have " />
      <item value="selected region does not hava" />
      <item value="selected region does not ha" />
      <item value="selected region does " />
      <item value="selected region dos" />
      <item value="selected region de" />
      <item value="selected regi" />
      <item value="selected regin" />
      <item value="selected " />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="321" />
        <entry key="ENGLISH" value="322" />
        <entry key="GERMAN" value="1" />
        <entry key="CZECH" value="1" />
        <entry key="LUXEMBOURGISH" value="1" />
        <entry key="ROMANIAN" value="1" />
        <entry key="NORWEGIAN" value="2" />
        <entry key="SLOVENIAN" value="1" />
        <entry key="SWAHILI" value="1" />
        <entry key="SPANISH" value="1" />
        <entry key="ITALIAN" value="1" />
        <entry key="INDONESIAN" value="2" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1610348205878" />
  </component>
  <component name="Settings">
    <option name="googleTranslateSettings">
      <google-translate>
        <option name="useTranslateGoogleCom" value="true" />
      </google-translate>
    </option>
    <option name="translator" value="YOUDAO" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="7a4dd746f1c5fe26" />
      </youdao-translate>
    </option>
  </component>
</application>